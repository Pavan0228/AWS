service: photo-upload-serverless

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    BUCKET_NAME: ${self:service}-public-photos-${sls:stage}
    PHOTO_TABLE: ${self:service}-photo-table-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource: "arn:aws:s3:::${self:service}-public-photos-${sls:stage}/*"  # Specific permissions for the bucket's objects
        - Effect: Allow
          Action:
            - rekognition:DetectLabels
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan*
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-photo-table-${sls:stage}"

functions:
  savePhoto:
    handler: function/savePhoto.savePhoto
    timeout: 20  
    memorySize: 512  
    events:
      - httpApi:
          path: /
          method: post
  
  getPhotoData:
    handler: function/getPhotoData.getPhotoData
    events:
      - httpApi:
          path: /
          method: get

  celebrityRecognition:
    handler: function/celebrityRecognition.celebrityRecognition
    timeout: 20  
    memorySize: 512  
    events:
      - httpApi:
          path: /celebrityRecognition
          method: post

resources:
  Resources:

    PhotoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-photo-table-${sls:stage}
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-public-photos-${sls:stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    PhotoBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PhotoBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Action: 
                - "s3:GetObject"
              Resource: 
                - !Join ['/', [!GetAtt PhotoBucket.Arn, '*']]
              Principal: "*"

  Outputs:
    PhotoBucketName:
      Value: !Ref PhotoBucket
      Export:
        Name: PhotoBucketName

plugins:
  - serverless-offline
